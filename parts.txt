Language: Python

Identifyable parts of a solution:

- JSON parser and generator

- tetris engine on hexagons:
-- the way tetris does it usually
-- hexagons: fitting data structure?

- units
-- units can lock: with a wrong command
-- unit can rotate with "pivot point"
-- unit is not necessarily a connected set of cells
-- units may not return to their old position (force this in the board representation!)
-- units are not created by us, but we can find out their order through lcg milking

- crypto: analyse linear congruental generator (lcd) for pseudo-random
-- solvers? compute power?
-- use prediction for benefits in game

- output commands: combine to obtain words of power
-- combination/dictionary attack? do not change the solution
-- find out words of power from Lovecraft
-- obtain *better* words of power through modifying the solution to a similar one

- build system and submission communication

- own jury system?

- phone home system for words of powers and other stuff?
-- may we? (asked the orgs, no answer)
-- should we?
-- server

- Solution strategies for (normal) tetris:
-- (old links are bullshit)
-- maxflow on the map? use https://github.com/pmneila/PyMaxflow
-- http://arxiv.org/abs/cs/0210020 / http://arxiv.org/pdf/cs/0210020v1.pdf
-- https://www2.cs.fau.de/EN/publication/download/mic.pdf
-- 

- Genetic algorithms in Python (depricated):
-- https://github.com/deap/deap
-- http://pyevolve.sourceforge.net/

- MDP in Python / MDP and Tetris
-- https://github.com/sawcordwell/pymdptoolbox / https://pypi.python.org/pypi/pymdptoolbox/
-- http://de.slideshare.net/JungkyuLee1/tetris-automatic-playing
-- http://cs229.stanford.edu/proj2012/BodoiaPuranik-ApplyingReinforcementLearningToCompetitiveTetris.pdf
-- https://github.com/tbq/tetris-auto-player
-- Use tetris AI for each non-empty line as bottom and then rank them bottom-up?
--- Still need a path finder!

- Another approach (Sarsa):
-- http://research.ict.ru.ac.za/g02c0108/CSHnsThesis.pdf
-- http://artint.info/demos/rl/SarsaController.java
-- https://github.com/amarack/python-rl/blob/master/pyrl/agents/sarsa_lambda_ann.py

- Path finding:
-- Hex: http://www.redblobgames.com/grids/hexagons/
-- A*: http://www.redblobgames.com/pathfinding/a-star/implementation.html

- Random titbits
-- http://playboard.me/android/apps/com.sam.hex
-- https://hextris.github.io/hextris/
-- http://www.plonga.com/puzzle/Tetris/Hexagon-Tetris -- more or less our case
-- http://colinfahey.com/tetris/tetris.html


